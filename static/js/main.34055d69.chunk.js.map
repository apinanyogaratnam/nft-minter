{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","Livepeer","require","apiKey","process","livepeerObject","useState","data","setData","streamUrl","setStreamUrl","showButton","setShowButton","nameOfNft","setNameOfNft","descriptionOfNft","setDescriptionOfNft","address","setAddress","nftDeployedUrl","setNftDeployedUrl","covalentData","setCovalentData","content","getStreamUrl","a","url","id","axios","get","headers","Authorization","listOfAllStreams","length","alert","mp4Url","mintStream","e","preventDefault","body","auth","post","res","status","transaction_external_url","client","NFTStorage","token","storeBlob","Blob","chain","contract_address","transaction_hash","description","mint_to_address","covalent","covalentRes","className","onClick","Stream","create","then","streamKey","src","href","target","value","type","placeholder","onChange","name","required","JSON","stringify","navigator","clipboard","writeText","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34055d69.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport ShakaPlayer from 'shaka-player-react';\nimport \"shaka-player/dist/controls.css\";\nimport { NFTStorage, File, Blob } from \"nft.storage\";\n\nfunction App() {\n  // livepeer implementation\n  const Livepeer = require(\"livepeer-nodejs\");\n  const apiKey = process.env.REACT_APP_LIVEPEER_API_KEY;\n  const livepeerObject = new Livepeer(apiKey);\n  const [data, setData] = useState(null);\n  const [streamUrl, setStreamUrl] = useState(null);\n  const [showButton, setShowButton] = useState(false);\n\n  const [nameOfNft, setNameOfNft] = useState(\"\");\n  const [descriptionOfNft, setDescriptionOfNft] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n\n  const [nftDeployedUrl, setNftDeployedUrl] = useState(\"\");\n\n  const [covalentData, setCovalentData] = useState(null);\n\n  const content = {\n      \"name\": \"test_stream\", \n      \"profiles\": [\n          {\n              \"name\": \"720p\",\n              \"bitrate\": 2000000,\n              \"fps\": 30,\n              \"width\": 1280,\n              \"height\": 720\n          },\n          {\n              \"name\": \"480p\",\n              \"bitrate\": 1000000,\n              \"fps\": 30,\n              \"width\": 854,\n              \"height\": 480\n          },\n          {\n              \"name\": \"360p\",\n              \"bitrate\": 500000,\n              \"fps\": 30,\n              \"width\": 640,\n              \"height\": 360\n          },\n      ],\n      \"record\": true\n  };\n\n  const startStream = () => {\n      livepeerObject.Stream.create(content).then((res) => {\n          setData(res);\n          setShowButton(true);\n      });\n  };\n\n  const getStreamUrl = async () => {\n      const url = `https://livepeer.com/api/session?limit=20&parentId=${data.id}`;\n\n      const listOfAllStreams = await axios.get(url, {\n          headers: {\n              Authorization: `Bearer ${apiKey}`,\n          },\n      });\n\n      if (listOfAllStreams.data.length === 0) {\n          alert(\"No stream detected\");\n          return;\n      }\n      \n      setStreamUrl(listOfAllStreams.data[0].mp4Url);\n\n      if (streamUrl === \"\") alert(\"stream is currently processing\");\n  };\n\n  // nftport implementation\n  const mintStream = async (e) => {\n      e.preventDefault();\n      if (streamUrl === \"\") {\n        alert(\"Stream is currently processing\");\n        return;\n      }\n      if (streamUrl === null) {\n        alert(\"No stream detected\");\n        return;\n      }\n\n      alert(\"Stream is being minted\");\n\n      const nftPortApiKey = process.env.REACT_APP_NFT_PORT_API_KEY;\n      const urlToMint = \"https://api.nftport.xyz/v0/mints/easy/urls\"\n      const body = {\n        \"chain\": \"rinkeby\",\n        \"name\": nameOfNft, // update to user's preferred nft name\n        \"description\": descriptionOfNft, // update to user's preferred nft description\n        \"file_url\": streamUrl,\n        \"mint_to_address\": address // update to user's preferred address\n      };\n\n      const auth = {\n        headers: {\n          Authorization: nftPortApiKey\n        }\n      };\n\n      const res = await axios.post(urlToMint, body, auth);\n      \n      if (res.status === 200) {\n        alert(\"Successfully minted stream\");\n        setNameOfNft(\"\");\n        setDescriptionOfNft(\"\");\n        setAddress(\"\");\n        setNftDeployedUrl(res.data.transaction_external_url);\n\n        // filecoin nft storage implementation\n        const client = new NFTStorage({ token: process.env.REACT_APP_NFT_STORAGE_API_KEY });\n        const cid = await client.storeBlob(new Blob([{\n          chain: res.data.chain,\n          contract_address: res.data.contract_address,\n          transaction_hash: res.data.transaction_hash,\n          description: res.data.description,\n          address: res.data.mint_to_address\n        }]));\n\n        // covalent data implementation\n        const covalent = \"https://api.covalenthq.com/v1/1/address/\" + address + \"/transactions_v2/?quote-currency=USD&format=JSON&block-signed-at-asc=false&no-logs=false&key=\" + process.env.REACT_APP_COVALENT_API_KEY;\n        const covalentRes = await axios.get(covalent);\n        setCovalentData(covalentRes.data.data);\n      } else {\n        alert(\"Error minting stream\");\n      }\n  }\n\n  const copyData = () => {\n    navigator.clipboard.writeText(JSON.stringify(covalentData));\n  }\n\n  return (\n    <div className=\"App\">\n        <div className=\"stream-url-text-box\">\n          Stream url: {streamUrl !== \"\" && streamUrl !== null ? <b>{streamUrl}</b> : streamUrl === \"\" ? <b>stream currently processing</b> : <b>No streams created</b>}\n        </div>\n\n        <br />\n        <button onClick={startStream}>Stream Video</button>\n        {data ? <p>stream key: {data.streamKey} server: rtmp://rtmp.livepeer.com/live (plug into streaming software)</p> : null}\n        {showButton ? <button onClick={getStreamUrl}>Play Stream</button> : null}\n        <br /><br />\n        <div className=\"video-container\">\n          {streamUrl !== \"\" && streamUrl != null ? <ShakaPlayer src={streamUrl} /> : <h3>video will appear here</h3>}\n        </div>\n        <br /><br />\n\n        {\n          nftDeployedUrl !== \"\" ? <a href={nftDeployedUrl} target=\"_blank\">View NFT</a> : null\n        }\n\n        <br /><br />\n        <form>\n          <input\n            value={nameOfNft}\n            type=\"text\"\n            placeholder=\"Name of NFT\"\n            onChange={(e) => setNameOfNft(e.target.value)}\n            name=\"nameOfNft\"\n            required\n            />\n          <input\n            value={descriptionOfNft}\n            type=\"text\"\n            placeholder=\"Description of NFT\"\n            onChange={(e) => setDescriptionOfNft(e.target.value)}\n            name=\"descriptionOfNft\"\n            required\n            />\n          <input\n            value={address}\n            type=\"text\"\n            placeholder=\"Wallet Address\"\n            onChange={(e) => setAddress(e.target.value)}\n            name=\"address\"\n            required\n            />\n          <button onClick={mintStream}>Mint Video</button>\n        </form>\n\n        {\n          covalentData !== null ? <p>{JSON.stringify(covalentData)}</p> : null\n        }\n        {\n          covalentData !== null ? <button onClick={() => copyData()}>Copy Data</button> : null\n        }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}